// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: cleaner.proto

package cleaner

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CleanerService_ProceedCleaning_FullMethodName   = "/cleaner.CleanerService/ProceedCleaning"
	CleanerService_GetAvailableTeams_FullMethodName = "/cleaner.CleanerService/GetAvailableTeams"
	CleanerService_GetTeamsStats_FullMethodName     = "/cleaner.CleanerService/GetTeamsStats"
)

// CleanerServiceClient is the client API for CleanerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CleanerServiceClient interface {
	ProceedCleaning(ctx context.Context, in *ProceedCleaningIn, opts ...grpc.CallOption) (*ProceedCleaningOut, error)
	GetAvailableTeams(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAvailableTeamsOut, error)
	GetTeamsStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTeamsStatsOut, error)
}

type cleanerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCleanerServiceClient(cc grpc.ClientConnInterface) CleanerServiceClient {
	return &cleanerServiceClient{cc}
}

func (c *cleanerServiceClient) ProceedCleaning(ctx context.Context, in *ProceedCleaningIn, opts ...grpc.CallOption) (*ProceedCleaningOut, error) {
	out := new(ProceedCleaningOut)
	err := c.cc.Invoke(ctx, CleanerService_ProceedCleaning_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cleanerServiceClient) GetAvailableTeams(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAvailableTeamsOut, error) {
	out := new(GetAvailableTeamsOut)
	err := c.cc.Invoke(ctx, CleanerService_GetAvailableTeams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cleanerServiceClient) GetTeamsStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTeamsStatsOut, error) {
	out := new(GetTeamsStatsOut)
	err := c.cc.Invoke(ctx, CleanerService_GetTeamsStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CleanerServiceServer is the server API for CleanerService service.
// All implementations must embed UnimplementedCleanerServiceServer
// for forward compatibility
type CleanerServiceServer interface {
	ProceedCleaning(context.Context, *ProceedCleaningIn) (*ProceedCleaningOut, error)
	GetAvailableTeams(context.Context, *emptypb.Empty) (*GetAvailableTeamsOut, error)
	GetTeamsStats(context.Context, *emptypb.Empty) (*GetTeamsStatsOut, error)
	mustEmbedUnimplementedCleanerServiceServer()
}

// UnimplementedCleanerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCleanerServiceServer struct {
}

func (UnimplementedCleanerServiceServer) ProceedCleaning(context.Context, *ProceedCleaningIn) (*ProceedCleaningOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProceedCleaning not implemented")
}
func (UnimplementedCleanerServiceServer) GetAvailableTeams(context.Context, *emptypb.Empty) (*GetAvailableTeamsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableTeams not implemented")
}
func (UnimplementedCleanerServiceServer) GetTeamsStats(context.Context, *emptypb.Empty) (*GetTeamsStatsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamsStats not implemented")
}
func (UnimplementedCleanerServiceServer) mustEmbedUnimplementedCleanerServiceServer() {}

// UnsafeCleanerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CleanerServiceServer will
// result in compilation errors.
type UnsafeCleanerServiceServer interface {
	mustEmbedUnimplementedCleanerServiceServer()
}

func RegisterCleanerServiceServer(s grpc.ServiceRegistrar, srv CleanerServiceServer) {
	s.RegisterService(&CleanerService_ServiceDesc, srv)
}

func _CleanerService_ProceedCleaning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProceedCleaningIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CleanerServiceServer).ProceedCleaning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CleanerService_ProceedCleaning_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CleanerServiceServer).ProceedCleaning(ctx, req.(*ProceedCleaningIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _CleanerService_GetAvailableTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CleanerServiceServer).GetAvailableTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CleanerService_GetAvailableTeams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CleanerServiceServer).GetAvailableTeams(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CleanerService_GetTeamsStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CleanerServiceServer).GetTeamsStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CleanerService_GetTeamsStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CleanerServiceServer).GetTeamsStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CleanerService_ServiceDesc is the grpc.ServiceDesc for CleanerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CleanerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cleaner.CleanerService",
	HandlerType: (*CleanerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProceedCleaning",
			Handler:    _CleanerService_ProceedCleaning_Handler,
		},
		{
			MethodName: "GetAvailableTeams",
			Handler:    _CleanerService_GetAvailableTeams_Handler,
		},
		{
			MethodName: "GetTeamsStats",
			Handler:    _CleanerService_GetTeamsStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cleaner.proto",
}
